//====================================================================
//  C言語プログラミング  例題
//  単純整列算法  処理過程
//--------------------------------------------------------------------
//  SimpleSort  SimpleSortProc.h
//  Linux  GCC 4.4
//--------------------------------------------------------------------
//  富永研究室  tominaga 富永浩之
//  2002.02.07
//====================================================================


//--------------------------------------------------------------------
//  定数定義マクロ
//--------------------------------------------------------------------

#define LEN    1000    // 配列長
#define TRUE   1       // 真値     
#define FALSE  0       // 偽値

//--------------------------------------------------------------------
//  データ型定義
//--------------------------------------------------------------------

typedef int    Bool;        // 真偽値
typedef int    Data;        // 整列対象のデータ型


//====================================================================
//  関数宣言
//====================================================================

//--------------------------------------------------------------------
//  単純整列算法
//--------------------------------------------------------------------

//----  単純選択法
void sel_sort_ct(Data arr[], int n, int *ct_c, int *ct_s); 

//----  単純交換法(バブルソート)
void exch_sort_ct(Data arr[], int n, int *ct_c, int *ct_s); 

//----  単純挿入法
void ins_sort_ct(Data arr[], int n, int *ct_c, int *ct_s); 

//--------------------------------------------------------------------
//  単純整列算法
//--------------------------------------------------------------------

//----  撹拌ソート(シェーカーソート、カクテルソート)
void shaker_sort_ct(Data arr[], int n, int *ct_c, int *ct_s);

//----  小人ソート(ノームノート)
void gnome_sort_ct(Data arr[], int n, int *ct_c, int *ct_s);

//----  転置ソート(奇偶転置ソート)
void trans_sort_ct(Data arr[], int n, int *ct_c, int *ct_s);

//--------------------------------------------------------------------
//  補助関数
//--------------------------------------------------------------------

//----  配列の要素比較 
Bool arr_ord_ct(Data arr[], int p1, int p2, int *ct); 

//----  配列の要素交換 
void arr_swap_ct(Data arr[], int p1, int p2, int *ct); 

//----  配列への入力
void arr_input(Data arr[], int n); 

//----  配列からの出力
void arr_output(Data arr[], int n); 

//----  整列過程の表示
void proc_view(Data arr[], int n, int ct_c, int ct_s);
